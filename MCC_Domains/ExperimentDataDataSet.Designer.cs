//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SharpNeat.Domains {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ExperimentDataDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ExperimentDataDataSet : global::System.Data.DataSet {
        
        private ExperimentDictionaryDataTable tableExperimentDictionary;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ExperimentDataDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected ExperimentDataDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ExperimentDictionary"] != null)) {
                    base.Tables.Add(new ExperimentDictionaryDataTable(ds.Tables["ExperimentDictionary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExperimentDictionaryDataTable ExperimentDictionary {
            get {
                return this.tableExperimentDictionary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            ExperimentDataDataSet cln = ((ExperimentDataDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ExperimentDictionary"] != null)) {
                    base.Tables.Add(new ExperimentDictionaryDataTable(ds.Tables["ExperimentDictionary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableExperimentDictionary = ((ExperimentDictionaryDataTable)(base.Tables["ExperimentDictionary"]));
            if ((initTable == true)) {
                if ((this.tableExperimentDictionary != null)) {
                    this.tableExperimentDictionary.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "ExperimentDataDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ExperimentDataDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableExperimentDictionary = new ExperimentDictionaryDataTable();
            base.Tables.Add(this.tableExperimentDictionary);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeExperimentDictionary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ExperimentDataDataSet ds = new ExperimentDataDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ExperimentDictionaryRowChangeEventHandler(object sender, ExperimentDictionaryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExperimentDictionaryDataTable : global::System.Data.TypedTableBase<ExperimentDictionaryRow> {
            
            private global::System.Data.DataColumn columnExperimentID;
            
            private global::System.Data.DataColumn columnExperimentName;
            
            private global::System.Data.DataColumn columnConfigurationFile;
            
            private global::System.Data.DataColumn columnNumRuns;
            
            private global::System.Data.DataColumn columnExperimentDomain;
            
            private global::System.Data.DataColumn columnExperimentType;
            
            private global::System.Data.DataColumn columnAlgorithmType;
            
            private global::System.Data.DataColumn columnOffspringBatchSize;
            
            private global::System.Data.DataColumn columnBehaviorCharacterization;
            
            private global::System.Data.DataColumn columnArchiveAdditionThreshold;
            
            private global::System.Data.DataColumn columnArchiveThresholdDecreaseMultiplier;
            
            private global::System.Data.DataColumn columnArchiveThresholdIncreaseMultiplier;
            
            private global::System.Data.DataColumn columnMaxGenerationalArchiveAddition;
            
            private global::System.Data.DataColumn columnMaxGenerationsWithoutArchiveAddition;
            
            private global::System.Data.DataColumn columnPopulationEvaluationFrequency;
            
            private global::System.Data.DataColumn columnConnectionProportion;
            
            private global::System.Data.DataColumn columnPopulationSize;
            
            private global::System.Data.DataColumn columnNumSpecies;
            
            private global::System.Data.DataColumn columnElitismProportion;
            
            private global::System.Data.DataColumn columnSelectionProportion;
            
            private global::System.Data.DataColumn columnAsexualProbability;
            
            private global::System.Data.DataColumn columnCrossoverProbability;
            
            private global::System.Data.DataColumn columnInterspeciesMatingProbability;
            
            private global::System.Data.DataColumn columnMutateConnectionWeightProbability;
            
            private global::System.Data.DataColumn columnMutateAddNeuronProbability;
            
            private global::System.Data.DataColumn columnMutateAddConnectionProbability;
            
            private global::System.Data.DataColumn columnMutateDeleteConnectionProbability;
            
            private global::System.Data.DataColumn columnConnectionWeightRange;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExperimentDictionaryDataTable() {
                this.TableName = "ExperimentDictionary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ExperimentDictionaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ExperimentDictionaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ExperimentIDColumn {
                get {
                    return this.columnExperimentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ExperimentNameColumn {
                get {
                    return this.columnExperimentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ConfigurationFileColumn {
                get {
                    return this.columnConfigurationFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NumRunsColumn {
                get {
                    return this.columnNumRuns;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ExperimentDomainColumn {
                get {
                    return this.columnExperimentDomain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ExperimentTypeColumn {
                get {
                    return this.columnExperimentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AlgorithmTypeColumn {
                get {
                    return this.columnAlgorithmType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OffspringBatchSizeColumn {
                get {
                    return this.columnOffspringBatchSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BehaviorCharacterizationColumn {
                get {
                    return this.columnBehaviorCharacterization;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ArchiveAdditionThresholdColumn {
                get {
                    return this.columnArchiveAdditionThreshold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ArchiveThresholdDecreaseMultiplierColumn {
                get {
                    return this.columnArchiveThresholdDecreaseMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ArchiveThresholdIncreaseMultiplierColumn {
                get {
                    return this.columnArchiveThresholdIncreaseMultiplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MaxGenerationalArchiveAdditionColumn {
                get {
                    return this.columnMaxGenerationalArchiveAddition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MaxGenerationsWithoutArchiveAdditionColumn {
                get {
                    return this.columnMaxGenerationsWithoutArchiveAddition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PopulationEvaluationFrequencyColumn {
                get {
                    return this.columnPopulationEvaluationFrequency;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ConnectionProportionColumn {
                get {
                    return this.columnConnectionProportion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PopulationSizeColumn {
                get {
                    return this.columnPopulationSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NumSpeciesColumn {
                get {
                    return this.columnNumSpecies;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ElitismProportionColumn {
                get {
                    return this.columnElitismProportion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SelectionProportionColumn {
                get {
                    return this.columnSelectionProportion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AsexualProbabilityColumn {
                get {
                    return this.columnAsexualProbability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CrossoverProbabilityColumn {
                get {
                    return this.columnCrossoverProbability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InterspeciesMatingProbabilityColumn {
                get {
                    return this.columnInterspeciesMatingProbability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MutateConnectionWeightProbabilityColumn {
                get {
                    return this.columnMutateConnectionWeightProbability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MutateAddNeuronProbabilityColumn {
                get {
                    return this.columnMutateAddNeuronProbability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MutateAddConnectionProbabilityColumn {
                get {
                    return this.columnMutateAddConnectionProbability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MutateDeleteConnectionProbabilityColumn {
                get {
                    return this.columnMutateDeleteConnectionProbability;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ConnectionWeightRangeColumn {
                get {
                    return this.columnConnectionWeightRange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExperimentDictionaryRow this[int index] {
                get {
                    return ((ExperimentDictionaryRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ExperimentDictionaryRowChangeEventHandler ExperimentDictionaryRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ExperimentDictionaryRowChangeEventHandler ExperimentDictionaryRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ExperimentDictionaryRowChangeEventHandler ExperimentDictionaryRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ExperimentDictionaryRowChangeEventHandler ExperimentDictionaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddExperimentDictionaryRow(ExperimentDictionaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExperimentDictionaryRow AddExperimentDictionaryRow(
                        string ExperimentName, 
                        string ConfigurationFile, 
                        int NumRuns, 
                        string ExperimentDomain, 
                        string ExperimentType, 
                        string AlgorithmType, 
                        int OffspringBatchSize, 
                        string BehaviorCharacterization, 
                        int ArchiveAdditionThreshold, 
                        double ArchiveThresholdDecreaseMultiplier, 
                        double ArchiveThresholdIncreaseMultiplier, 
                        int MaxGenerationalArchiveAddition, 
                        int MaxGenerationsWithoutArchiveAddition, 
                        int PopulationEvaluationFrequency, 
                        double ConnectionProportion, 
                        int PopulationSize, 
                        int NumSpecies, 
                        double ElitismProportion, 
                        double SelectionProportion, 
                        double AsexualProbability, 
                        double CrossoverProbability, 
                        double InterspeciesMatingProbability, 
                        double MutateConnectionWeightProbability, 
                        double MutateAddNeuronProbability, 
                        double MutateAddConnectionProbability, 
                        double MutateDeleteConnectionProbability, 
                        int ConnectionWeightRange) {
                ExperimentDictionaryRow rowExperimentDictionaryRow = ((ExperimentDictionaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ExperimentName,
                        ConfigurationFile,
                        NumRuns,
                        ExperimentDomain,
                        ExperimentType,
                        AlgorithmType,
                        OffspringBatchSize,
                        BehaviorCharacterization,
                        ArchiveAdditionThreshold,
                        ArchiveThresholdDecreaseMultiplier,
                        ArchiveThresholdIncreaseMultiplier,
                        MaxGenerationalArchiveAddition,
                        MaxGenerationsWithoutArchiveAddition,
                        PopulationEvaluationFrequency,
                        ConnectionProportion,
                        PopulationSize,
                        NumSpecies,
                        ElitismProportion,
                        SelectionProportion,
                        AsexualProbability,
                        CrossoverProbability,
                        InterspeciesMatingProbability,
                        MutateConnectionWeightProbability,
                        MutateAddNeuronProbability,
                        MutateAddConnectionProbability,
                        MutateDeleteConnectionProbability,
                        ConnectionWeightRange};
                rowExperimentDictionaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExperimentDictionaryRow);
                return rowExperimentDictionaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ExperimentDictionaryDataTable cln = ((ExperimentDictionaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExperimentDictionaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnExperimentID = base.Columns["ExperimentID"];
                this.columnExperimentName = base.Columns["ExperimentName"];
                this.columnConfigurationFile = base.Columns["ConfigurationFile"];
                this.columnNumRuns = base.Columns["NumRuns"];
                this.columnExperimentDomain = base.Columns["ExperimentDomain"];
                this.columnExperimentType = base.Columns["ExperimentType"];
                this.columnAlgorithmType = base.Columns["SearchType"];
                this.columnOffspringBatchSize = base.Columns["OffspringBatchSize"];
                this.columnBehaviorCharacterization = base.Columns["BehaviorCharacterization"];
                this.columnArchiveAdditionThreshold = base.Columns["ArchiveAdditionThreshold"];
                this.columnArchiveThresholdDecreaseMultiplier = base.Columns["ArchiveThresholdDecreaseMultiplier"];
                this.columnArchiveThresholdIncreaseMultiplier = base.Columns["ArchiveThresholdIncreaseMultiplier"];
                this.columnMaxGenerationalArchiveAddition = base.Columns["MaxGenerationalArchiveAddition"];
                this.columnMaxGenerationsWithoutArchiveAddition = base.Columns["MaxGenerationsWithoutArchiveAddition"];
                this.columnPopulationEvaluationFrequency = base.Columns["PopulationEvaluationFrequency"];
                this.columnConnectionProportion = base.Columns["ConnectionProportion"];
                this.columnPopulationSize = base.Columns["PopulationSize"];
                this.columnNumSpecies = base.Columns["NumSpecies"];
                this.columnElitismProportion = base.Columns["ElitismProportion"];
                this.columnSelectionProportion = base.Columns["SelectionProportion"];
                this.columnAsexualProbability = base.Columns["AsexualProbability"];
                this.columnCrossoverProbability = base.Columns["CrossoverProbability"];
                this.columnInterspeciesMatingProbability = base.Columns["InterspeciesMatingProbability"];
                this.columnMutateConnectionWeightProbability = base.Columns["MutateConnectionWeightProbability"];
                this.columnMutateAddNeuronProbability = base.Columns["MutateAddNeuronProbability"];
                this.columnMutateAddConnectionProbability = base.Columns["MutateAddConnectionProbability"];
                this.columnMutateDeleteConnectionProbability = base.Columns["MutateDeleteConnectionProbability"];
                this.columnConnectionWeightRange = base.Columns["ConnectionWeightRange"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnExperimentID = new global::System.Data.DataColumn("ExperimentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExperimentID);
                this.columnExperimentName = new global::System.Data.DataColumn("ExperimentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExperimentName);
                this.columnConfigurationFile = new global::System.Data.DataColumn("ConfigurationFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfigurationFile);
                this.columnNumRuns = new global::System.Data.DataColumn("NumRuns", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumRuns);
                this.columnExperimentDomain = new global::System.Data.DataColumn("ExperimentDomain", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExperimentDomain);
                this.columnExperimentType = new global::System.Data.DataColumn("ExperimentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExperimentType);
                this.columnAlgorithmType = new global::System.Data.DataColumn("SearchType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlgorithmType);
                this.columnOffspringBatchSize = new global::System.Data.DataColumn("OffspringBatchSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffspringBatchSize);
                this.columnBehaviorCharacterization = new global::System.Data.DataColumn("BehaviorCharacterization", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBehaviorCharacterization);
                this.columnArchiveAdditionThreshold = new global::System.Data.DataColumn("ArchiveAdditionThreshold", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchiveAdditionThreshold);
                this.columnArchiveThresholdDecreaseMultiplier = new global::System.Data.DataColumn("ArchiveThresholdDecreaseMultiplier", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchiveThresholdDecreaseMultiplier);
                this.columnArchiveThresholdIncreaseMultiplier = new global::System.Data.DataColumn("ArchiveThresholdIncreaseMultiplier", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchiveThresholdIncreaseMultiplier);
                this.columnMaxGenerationalArchiveAddition = new global::System.Data.DataColumn("MaxGenerationalArchiveAddition", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxGenerationalArchiveAddition);
                this.columnMaxGenerationsWithoutArchiveAddition = new global::System.Data.DataColumn("MaxGenerationsWithoutArchiveAddition", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxGenerationsWithoutArchiveAddition);
                this.columnPopulationEvaluationFrequency = new global::System.Data.DataColumn("PopulationEvaluationFrequency", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPopulationEvaluationFrequency);
                this.columnConnectionProportion = new global::System.Data.DataColumn("ConnectionProportion", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionProportion);
                this.columnPopulationSize = new global::System.Data.DataColumn("PopulationSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPopulationSize);
                this.columnNumSpecies = new global::System.Data.DataColumn("NumSpecies", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumSpecies);
                this.columnElitismProportion = new global::System.Data.DataColumn("ElitismProportion", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElitismProportion);
                this.columnSelectionProportion = new global::System.Data.DataColumn("SelectionProportion", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelectionProportion);
                this.columnAsexualProbability = new global::System.Data.DataColumn("AsexualProbability", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsexualProbability);
                this.columnCrossoverProbability = new global::System.Data.DataColumn("CrossoverProbability", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrossoverProbability);
                this.columnInterspeciesMatingProbability = new global::System.Data.DataColumn("InterspeciesMatingProbability", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInterspeciesMatingProbability);
                this.columnMutateConnectionWeightProbability = new global::System.Data.DataColumn("MutateConnectionWeightProbability", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMutateConnectionWeightProbability);
                this.columnMutateAddNeuronProbability = new global::System.Data.DataColumn("MutateAddNeuronProbability", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMutateAddNeuronProbability);
                this.columnMutateAddConnectionProbability = new global::System.Data.DataColumn("MutateAddConnectionProbability", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMutateAddConnectionProbability);
                this.columnMutateDeleteConnectionProbability = new global::System.Data.DataColumn("MutateDeleteConnectionProbability", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMutateDeleteConnectionProbability);
                this.columnConnectionWeightRange = new global::System.Data.DataColumn("ConnectionWeightRange", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionWeightRange);
                this.columnExperimentID.AutoIncrement = true;
                this.columnExperimentID.AutoIncrementSeed = -1;
                this.columnExperimentID.AutoIncrementStep = -1;
                this.columnExperimentID.AllowDBNull = false;
                this.columnExperimentID.ReadOnly = true;
                this.columnExperimentName.AllowDBNull = false;
                this.columnExperimentName.MaxLength = 50;
                this.columnConfigurationFile.AllowDBNull = false;
                this.columnConfigurationFile.MaxLength = 50;
                this.columnNumRuns.AllowDBNull = false;
                this.columnExperimentDomain.AllowDBNull = false;
                this.columnExperimentDomain.MaxLength = 50;
                this.columnExperimentType.AllowDBNull = false;
                this.columnExperimentType.MaxLength = 50;
                this.columnAlgorithmType.AllowDBNull = false;
                this.columnAlgorithmType.MaxLength = 50;
                this.columnBehaviorCharacterization.MaxLength = 50;
                this.columnConnectionProportion.AllowDBNull = false;
                this.columnPopulationSize.AllowDBNull = false;
                this.columnNumSpecies.AllowDBNull = false;
                this.columnAsexualProbability.AllowDBNull = false;
                this.columnCrossoverProbability.AllowDBNull = false;
                this.columnInterspeciesMatingProbability.AllowDBNull = false;
                this.columnMutateConnectionWeightProbability.AllowDBNull = false;
                this.columnMutateAddNeuronProbability.AllowDBNull = false;
                this.columnMutateAddConnectionProbability.AllowDBNull = false;
                this.columnMutateDeleteConnectionProbability.AllowDBNull = false;
                this.columnConnectionWeightRange.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExperimentDictionaryRow NewExperimentDictionaryRow() {
                return ((ExperimentDictionaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExperimentDictionaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ExperimentDictionaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExperimentDictionaryRowChanged != null)) {
                    this.ExperimentDictionaryRowChanged(this, new ExperimentDictionaryRowChangeEvent(((ExperimentDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExperimentDictionaryRowChanging != null)) {
                    this.ExperimentDictionaryRowChanging(this, new ExperimentDictionaryRowChangeEvent(((ExperimentDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExperimentDictionaryRowDeleted != null)) {
                    this.ExperimentDictionaryRowDeleted(this, new ExperimentDictionaryRowChangeEvent(((ExperimentDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExperimentDictionaryRowDeleting != null)) {
                    this.ExperimentDictionaryRowDeleting(this, new ExperimentDictionaryRowChangeEvent(((ExperimentDictionaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveExperimentDictionaryRow(ExperimentDictionaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ExperimentDataDataSet ds = new ExperimentDataDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExperimentDictionaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ExperimentDictionaryRow : global::System.Data.DataRow {
            
            private ExperimentDictionaryDataTable tableExperimentDictionary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ExperimentDictionaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExperimentDictionary = ((ExperimentDictionaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ExperimentID {
                get {
                    return ((int)(this[this.tableExperimentDictionary.ExperimentIDColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.ExperimentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ExperimentName {
                get {
                    return ((string)(this[this.tableExperimentDictionary.ExperimentNameColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.ExperimentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ConfigurationFile {
                get {
                    return ((string)(this[this.tableExperimentDictionary.ConfigurationFileColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.ConfigurationFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int NumRuns {
                get {
                    return ((int)(this[this.tableExperimentDictionary.NumRunsColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.NumRunsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ExperimentDomain {
                get {
                    return ((string)(this[this.tableExperimentDictionary.ExperimentDomainColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.ExperimentDomainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ExperimentType {
                get {
                    return ((string)(this[this.tableExperimentDictionary.ExperimentTypeColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.ExperimentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AlgorithmType {
                get {
                    return ((string)(this[this.tableExperimentDictionary.AlgorithmTypeColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.AlgorithmTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int OffspringBatchSize {
                get {
                    try {
                        return ((int)(this[this.tableExperimentDictionary.OffspringBatchSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OffspringBatchSize\' in table \'ExperimentDictionary\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.OffspringBatchSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BehaviorCharacterization {
                get {
                    try {
                        return ((string)(this[this.tableExperimentDictionary.BehaviorCharacterizationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BehaviorCharacterization\' in table \'ExperimentDictionary\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.BehaviorCharacterizationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ArchiveAdditionThreshold {
                get {
                    try {
                        return ((int)(this[this.tableExperimentDictionary.ArchiveAdditionThresholdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArchiveAdditionThreshold\' in table \'ExperimentDictionary\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.ArchiveAdditionThresholdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ArchiveThresholdDecreaseMultiplier {
                get {
                    try {
                        return ((double)(this[this.tableExperimentDictionary.ArchiveThresholdDecreaseMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArchiveThresholdDecreaseMultiplier\' in table \'ExperimentDic" +
                                "tionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.ArchiveThresholdDecreaseMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ArchiveThresholdIncreaseMultiplier {
                get {
                    try {
                        return ((double)(this[this.tableExperimentDictionary.ArchiveThresholdIncreaseMultiplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArchiveThresholdIncreaseMultiplier\' in table \'ExperimentDic" +
                                "tionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.ArchiveThresholdIncreaseMultiplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MaxGenerationalArchiveAddition {
                get {
                    try {
                        return ((int)(this[this.tableExperimentDictionary.MaxGenerationalArchiveAdditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxGenerationalArchiveAddition\' in table \'ExperimentDiction" +
                                "ary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.MaxGenerationalArchiveAdditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MaxGenerationsWithoutArchiveAddition {
                get {
                    try {
                        return ((int)(this[this.tableExperimentDictionary.MaxGenerationsWithoutArchiveAdditionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxGenerationsWithoutArchiveAddition\' in table \'ExperimentD" +
                                "ictionary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.MaxGenerationsWithoutArchiveAdditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PopulationEvaluationFrequency {
                get {
                    try {
                        return ((int)(this[this.tableExperimentDictionary.PopulationEvaluationFrequencyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PopulationEvaluationFrequency\' in table \'ExperimentDictiona" +
                                "ry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.PopulationEvaluationFrequencyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ConnectionProportion {
                get {
                    return ((double)(this[this.tableExperimentDictionary.ConnectionProportionColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.ConnectionProportionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PopulationSize {
                get {
                    return ((int)(this[this.tableExperimentDictionary.PopulationSizeColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.PopulationSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int NumSpecies {
                get {
                    return ((int)(this[this.tableExperimentDictionary.NumSpeciesColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.NumSpeciesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ElitismProportion {
                get {
                    try {
                        return ((double)(this[this.tableExperimentDictionary.ElitismProportionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ElitismProportion\' in table \'ExperimentDictionary\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.ElitismProportionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double SelectionProportion {
                get {
                    try {
                        return ((double)(this[this.tableExperimentDictionary.SelectionProportionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SelectionProportion\' in table \'ExperimentDictionary\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableExperimentDictionary.SelectionProportionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double AsexualProbability {
                get {
                    return ((double)(this[this.tableExperimentDictionary.AsexualProbabilityColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.AsexualProbabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double CrossoverProbability {
                get {
                    return ((double)(this[this.tableExperimentDictionary.CrossoverProbabilityColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.CrossoverProbabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double InterspeciesMatingProbability {
                get {
                    return ((double)(this[this.tableExperimentDictionary.InterspeciesMatingProbabilityColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.InterspeciesMatingProbabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double MutateConnectionWeightProbability {
                get {
                    return ((double)(this[this.tableExperimentDictionary.MutateConnectionWeightProbabilityColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.MutateConnectionWeightProbabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double MutateAddNeuronProbability {
                get {
                    return ((double)(this[this.tableExperimentDictionary.MutateAddNeuronProbabilityColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.MutateAddNeuronProbabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double MutateAddConnectionProbability {
                get {
                    return ((double)(this[this.tableExperimentDictionary.MutateAddConnectionProbabilityColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.MutateAddConnectionProbabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double MutateDeleteConnectionProbability {
                get {
                    return ((double)(this[this.tableExperimentDictionary.MutateDeleteConnectionProbabilityColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.MutateDeleteConnectionProbabilityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ConnectionWeightRange {
                get {
                    return ((int)(this[this.tableExperimentDictionary.ConnectionWeightRangeColumn]));
                }
                set {
                    this[this.tableExperimentDictionary.ConnectionWeightRangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOffspringBatchSizeNull() {
                return this.IsNull(this.tableExperimentDictionary.OffspringBatchSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOffspringBatchSizeNull() {
                this[this.tableExperimentDictionary.OffspringBatchSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBehaviorCharacterizationNull() {
                return this.IsNull(this.tableExperimentDictionary.BehaviorCharacterizationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBehaviorCharacterizationNull() {
                this[this.tableExperimentDictionary.BehaviorCharacterizationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchiveAdditionThresholdNull() {
                return this.IsNull(this.tableExperimentDictionary.ArchiveAdditionThresholdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetArchiveAdditionThresholdNull() {
                this[this.tableExperimentDictionary.ArchiveAdditionThresholdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchiveThresholdDecreaseMultiplierNull() {
                return this.IsNull(this.tableExperimentDictionary.ArchiveThresholdDecreaseMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetArchiveThresholdDecreaseMultiplierNull() {
                this[this.tableExperimentDictionary.ArchiveThresholdDecreaseMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchiveThresholdIncreaseMultiplierNull() {
                return this.IsNull(this.tableExperimentDictionary.ArchiveThresholdIncreaseMultiplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetArchiveThresholdIncreaseMultiplierNull() {
                this[this.tableExperimentDictionary.ArchiveThresholdIncreaseMultiplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMaxGenerationalArchiveAdditionNull() {
                return this.IsNull(this.tableExperimentDictionary.MaxGenerationalArchiveAdditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMaxGenerationalArchiveAdditionNull() {
                this[this.tableExperimentDictionary.MaxGenerationalArchiveAdditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMaxGenerationsWithoutArchiveAdditionNull() {
                return this.IsNull(this.tableExperimentDictionary.MaxGenerationsWithoutArchiveAdditionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMaxGenerationsWithoutArchiveAdditionNull() {
                this[this.tableExperimentDictionary.MaxGenerationsWithoutArchiveAdditionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPopulationEvaluationFrequencyNull() {
                return this.IsNull(this.tableExperimentDictionary.PopulationEvaluationFrequencyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPopulationEvaluationFrequencyNull() {
                this[this.tableExperimentDictionary.PopulationEvaluationFrequencyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsElitismProportionNull() {
                return this.IsNull(this.tableExperimentDictionary.ElitismProportionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetElitismProportionNull() {
                this[this.tableExperimentDictionary.ElitismProportionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSelectionProportionNull() {
                return this.IsNull(this.tableExperimentDictionary.SelectionProportionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSelectionProportionNull() {
                this[this.tableExperimentDictionary.SelectionProportionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ExperimentDictionaryRowChangeEvent : global::System.EventArgs {
            
            private ExperimentDictionaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExperimentDictionaryRowChangeEvent(ExperimentDictionaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ExperimentDictionaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SharpNeat.Domains.ExperimentDataDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExperimentDictionaryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ExperimentDictionaryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ExperimentDictionary";
            tableMapping.ColumnMappings.Add("ExperimentID", "ExperimentID");
            tableMapping.ColumnMappings.Add("ExperimentName", "ExperimentName");
            tableMapping.ColumnMappings.Add("ConfigurationFile", "ConfigurationFile");
            tableMapping.ColumnMappings.Add("NumRuns", "NumRuns");
            tableMapping.ColumnMappings.Add("ExperimentDomain", "ExperimentDomain");
            tableMapping.ColumnMappings.Add("ExperimentType", "ExperimentType");
            tableMapping.ColumnMappings.Add("SearchType", "SearchType");
            tableMapping.ColumnMappings.Add("OffspringBatchSize", "OffspringBatchSize");
            tableMapping.ColumnMappings.Add("BehaviorCharacterization", "BehaviorCharacterization");
            tableMapping.ColumnMappings.Add("ArchiveAdditionThreshold", "ArchiveAdditionThreshold");
            tableMapping.ColumnMappings.Add("ArchiveThresholdDecreaseMultiplier", "ArchiveThresholdDecreaseMultiplier");
            tableMapping.ColumnMappings.Add("ArchiveThresholdIncreaseMultiplier", "ArchiveThresholdIncreaseMultiplier");
            tableMapping.ColumnMappings.Add("MaxGenerationalArchiveAddition", "MaxGenerationalArchiveAddition");
            tableMapping.ColumnMappings.Add("MaxGenerationsWithoutArchiveAddition", "MaxGenerationsWithoutArchiveAddition");
            tableMapping.ColumnMappings.Add("PopulationEvaluationFrequency", "PopulationEvaluationFrequency");
            tableMapping.ColumnMappings.Add("ConnectionProportion", "ConnectionProportion");
            tableMapping.ColumnMappings.Add("PopulationSize", "PopulationSize");
            tableMapping.ColumnMappings.Add("NumSpecies", "NumSpecies");
            tableMapping.ColumnMappings.Add("ElitismProportion", "ElitismProportion");
            tableMapping.ColumnMappings.Add("SelectionProportion", "SelectionProportion");
            tableMapping.ColumnMappings.Add("AsexualProbability", "AsexualProbability");
            tableMapping.ColumnMappings.Add("CrossoverProbability", "CrossoverProbability");
            tableMapping.ColumnMappings.Add("InterspeciesMatingProbability", "InterspeciesMatingProbability");
            tableMapping.ColumnMappings.Add("MutateConnectionWeightProbability", "MutateConnectionWeightProbability");
            tableMapping.ColumnMappings.Add("MutateAddNeuronProbability", "MutateAddNeuronProbability");
            tableMapping.ColumnMappings.Add("MutateAddConnectionProbability", "MutateAddConnectionProbability");
            tableMapping.ColumnMappings.Add("MutateDeleteConnectionProbability", "MutateDeleteConnectionProbability");
            tableMapping.ColumnMappings.Add("ConnectionWeightRange", "ConnectionWeightRange");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ExperimentDictionary] ([ExperimentName], [ConfigurationFile], [NumRuns], [ExperimentDomain], [ExperimentType], [SearchType], [OffspringBatchSize], [BehaviorCharacterization], [ArchiveAdditionThreshold], [ArchiveThresholdDecreaseMultiplier], [ArchiveThresholdIncreaseMultiplier], [MaxGenerationalArchiveAddition], [MaxGenerationsWithoutArchiveAddition], [PopulationEvaluationFrequency], [ConnectionProportion], [PopulationSize], [NumSpecies], [ElitismProportion], [SelectionProportion], [AsexualProbability], [CrossoverProbability], [InterspeciesMatingProbability], [MutateConnectionWeightProbability], [MutateAddNeuronProbability], [MutateAddConnectionProbability], [MutateDeleteConnectionProbability], [ConnectionWeightRange]) VALUES (@ExperimentName, @ConfigurationFile, @NumRuns, @ExperimentDomain, @ExperimentType, @SearchType, @OffspringBatchSize, @BehaviorCharacterization, @ArchiveAdditionThreshold, @ArchiveThresholdDecreaseMultiplier, @ArchiveThresholdIncreaseMultiplier, @MaxGenerationalArchiveAddition, @MaxGenerationsWithoutArchiveAddition, @PopulationEvaluationFrequency, @ConnectionProportion, @PopulationSize, @NumSpecies, @ElitismProportion, @SelectionProportion, @AsexualProbability, @CrossoverProbability, @InterspeciesMatingProbability, @MutateConnectionWeightProbability, @MutateAddNeuronProbability, @MutateAddConnectionProbability, @MutateDeleteConnectionProbability, @ConnectionWeightRange)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExperimentName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ExperimentName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConfigurationFile", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConfigurationFile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NumRuns", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NumRuns", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExperimentDomain", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ExperimentDomain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ExperimentType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ExperimentType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SearchType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SearchType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OffspringBatchSize", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OffspringBatchSize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BehaviorCharacterization", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BehaviorCharacterization", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArchiveAdditionThreshold", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArchiveAdditionThreshold", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArchiveThresholdDecreaseMultiplier", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArchiveThresholdDecreaseMultiplier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArchiveThresholdIncreaseMultiplier", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArchiveThresholdIncreaseMultiplier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaxGenerationalArchiveAddition", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaxGenerationalArchiveAddition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaxGenerationsWithoutArchiveAddition", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaxGenerationsWithoutArchiveAddition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PopulationEvaluationFrequency", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PopulationEvaluationFrequency", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConnectionProportion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConnectionProportion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PopulationSize", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PopulationSize", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NumSpecies", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NumSpecies", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ElitismProportion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ElitismProportion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SelectionProportion", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SelectionProportion", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AsexualProbability", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AsexualProbability", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CrossoverProbability", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CrossoverProbability", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InterspeciesMatingProbability", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InterspeciesMatingProbability", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MutateConnectionWeightProbability", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MutateConnectionWeightProbability", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MutateAddNeuronProbability", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MutateAddNeuronProbability", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MutateAddConnectionProbability", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MutateAddConnectionProbability", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MutateDeleteConnectionProbability", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MutateDeleteConnectionProbability", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConnectionWeightRange", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConnectionWeightRange", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SharpNeat.Domains.Properties.Settings.Default.ExperimentDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ExperimentID, ExperimentName, ConfigurationFile, NumRuns, ExperimentDomain, ExperimentType, SearchType, OffspringBatchSize, BehaviorCharacterization, ArchiveAdditionThreshold, ArchiveThresholdDecreaseMultiplier, ArchiveThresholdIncreaseMultiplier, MaxGenerationalArchiveAddition, MaxGenerationsWithoutArchiveAddition, PopulationEvaluationFrequency, ConnectionProportion, PopulationSize, NumSpecies, ElitismProportion, SelectionProportion, AsexualProbability, CrossoverProbability, InterspeciesMatingProbability, MutateConnectionWeightProbability, MutateAddNeuronProbability, MutateAddConnectionProbability, MutateDeleteConnectionProbability, ConnectionWeightRange FROM dbo.ExperimentDictionary";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ExperimentDataDataSet.ExperimentDictionaryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ExperimentDataDataSet.ExperimentDictionaryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ExperimentDataDataSet.ExperimentDictionaryDataTable dataTable = new ExperimentDataDataSet.ExperimentDictionaryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ExperimentDataDataSet.ExperimentDictionaryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ExperimentDataDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ExperimentDictionary");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string ExperimentName, 
                    string ConfigurationFile, 
                    int NumRuns, 
                    string ExperimentDomain, 
                    string ExperimentType, 
                    string AlgorithmType, 
                    global::System.Nullable<int> OffspringBatchSize, 
                    string BehaviorCharacterization, 
                    global::System.Nullable<int> ArchiveAdditionThreshold, 
                    global::System.Nullable<double> ArchiveThresholdDecreaseMultiplier, 
                    global::System.Nullable<double> ArchiveThresholdIncreaseMultiplier, 
                    global::System.Nullable<int> MaxGenerationalArchiveAddition, 
                    global::System.Nullable<int> MaxGenerationsWithoutArchiveAddition, 
                    global::System.Nullable<int> PopulationEvaluationFrequency, 
                    double ConnectionProportion, 
                    int PopulationSize, 
                    int NumSpecies, 
                    global::System.Nullable<double> ElitismProportion, 
                    global::System.Nullable<double> SelectionProportion, 
                    double AsexualProbability, 
                    double CrossoverProbability, 
                    double InterspeciesMatingProbability, 
                    double MutateConnectionWeightProbability, 
                    double MutateAddNeuronProbability, 
                    double MutateAddConnectionProbability, 
                    double MutateDeleteConnectionProbability, 
                    int ConnectionWeightRange) {
            if ((ExperimentName == null)) {
                throw new global::System.ArgumentNullException("ExperimentName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ExperimentName));
            }
            if ((ConfigurationFile == null)) {
                throw new global::System.ArgumentNullException("ConfigurationFile");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ConfigurationFile));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(NumRuns));
            if ((ExperimentDomain == null)) {
                throw new global::System.ArgumentNullException("ExperimentDomain");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ExperimentDomain));
            }
            if ((ExperimentType == null)) {
                throw new global::System.ArgumentNullException("ExperimentType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ExperimentType));
            }
            if ((AlgorithmType == null)) {
                throw new global::System.ArgumentNullException("AlgorithmType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(AlgorithmType));
            }
            if ((OffspringBatchSize.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(OffspringBatchSize.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((BehaviorCharacterization == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(BehaviorCharacterization));
            }
            if ((ArchiveAdditionThreshold.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ArchiveAdditionThreshold.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((ArchiveThresholdDecreaseMultiplier.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(ArchiveThresholdDecreaseMultiplier.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((ArchiveThresholdIncreaseMultiplier.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(ArchiveThresholdIncreaseMultiplier.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((MaxGenerationalArchiveAddition.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(MaxGenerationalArchiveAddition.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((MaxGenerationsWithoutArchiveAddition.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(MaxGenerationsWithoutArchiveAddition.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((PopulationEvaluationFrequency.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(PopulationEvaluationFrequency.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((double)(ConnectionProportion));
            this.Adapter.InsertCommand.Parameters[15].Value = ((int)(PopulationSize));
            this.Adapter.InsertCommand.Parameters[16].Value = ((int)(NumSpecies));
            if ((ElitismProportion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(ElitismProportion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((SelectionProportion.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(SelectionProportion.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[19].Value = ((double)(AsexualProbability));
            this.Adapter.InsertCommand.Parameters[20].Value = ((double)(CrossoverProbability));
            this.Adapter.InsertCommand.Parameters[21].Value = ((double)(InterspeciesMatingProbability));
            this.Adapter.InsertCommand.Parameters[22].Value = ((double)(MutateConnectionWeightProbability));
            this.Adapter.InsertCommand.Parameters[23].Value = ((double)(MutateAddNeuronProbability));
            this.Adapter.InsertCommand.Parameters[24].Value = ((double)(MutateAddConnectionProbability));
            this.Adapter.InsertCommand.Parameters[25].Value = ((double)(MutateDeleteConnectionProbability));
            this.Adapter.InsertCommand.Parameters[26].Value = ((int)(ConnectionWeightRange));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ExperimentDictionaryTableAdapter _experimentDictionaryTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public ExperimentDictionaryTableAdapter ExperimentDictionaryTableAdapter {
            get {
                return this._experimentDictionaryTableAdapter;
            }
            set {
                this._experimentDictionaryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._experimentDictionaryTableAdapter != null) 
                            && (this._experimentDictionaryTableAdapter.Connection != null))) {
                    return this._experimentDictionaryTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._experimentDictionaryTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(ExperimentDataDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._experimentDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ExperimentDictionary.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._experimentDictionaryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(ExperimentDataDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._experimentDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ExperimentDictionary.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._experimentDictionaryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(ExperimentDataDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._experimentDictionaryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ExperimentDictionary.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._experimentDictionaryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(ExperimentDataDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._experimentDictionaryTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._experimentDictionaryTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._experimentDictionaryTableAdapter != null)) {
                    revertConnections.Add(this._experimentDictionaryTableAdapter, this._experimentDictionaryTableAdapter.Connection);
                    this._experimentDictionaryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._experimentDictionaryTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._experimentDictionaryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._experimentDictionaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._experimentDictionaryTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._experimentDictionaryTableAdapter != null)) {
                    this._experimentDictionaryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._experimentDictionaryTableAdapter]));
                    this._experimentDictionaryTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591